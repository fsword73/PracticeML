import numpy as np
import plaidml
import plaidml.keras
plaidml.keras.install_backend()
import keras.backend as K


class DepthWiseConv(plaidml.tile.Operation):
    def __init__(self, x,y):
        code = """function (I[N,C,H,W], K[M, C,R,S]) -> (O) {
                      O[n,c*M + m,h,w: N,C*M,H-2,W-2] = +(I[n,c,h+i,w+j]*K[m,c,i,j]);
                  }"""
        idims =  x.shape.dims        
        idims2 = y.shape.dims
        outshape = plaidml.tile.Shape(x.shape.dtype, (idims[0], idims[1], idims[2]-2, idims[3]-2))
        super(DepthWiseConv, self).__init__(code, [('I', x),('K', y) ], [('O', outshape)])

class DepthWiseConv2(plaidml.tile.Operation):
    def __init__(self, x,y):
        code = """function (I[N,C,H,W], K[M, C,R,S]) -> (O) {
                      O[n,c,h,w: N,C,H-2,W-2] = +(I[n,c,h+i,w+j]*K[m,c,i,j]);
                  }"""
        idims =  x.shape.dims        
        idims2 = y.shape.dims
        outshape = plaidml.tile.Shape(x.shape.dtype, (idims[0], idims[1], idims[2]-2, idims[3]-2))
        super(DepthWiseConv2, self).__init__(code, [('I', x),('K', y) ], [('O', outshape)])
        

#Generate input data
dimensions = (1, 3, 4, 4)
dimensions2 = (1, 3, 3, 3)
A = (np.random.rand(*dimensions) + 1.) / 52.
B = (np.random.rand(*dimensions2) + 1.) / 52.
#Process data using PlaidML
i = K.variable(A)
k = K.variable(B)

result = DepthWiseConv.function(i,k)
result2 = DepthWiseConv2.function(i,k)

print(result.eval()) # Report results

print("\n")
print(result2.eval()) # Report results
